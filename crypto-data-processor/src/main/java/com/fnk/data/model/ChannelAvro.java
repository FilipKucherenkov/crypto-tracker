/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fnk.data.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ChannelAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3709383060238128059L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ChannelAvro\",\"namespace\":\"com.fnk.model\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Channel name, e.g. heartbeat, ticker\"},{\"name\":\"product_ids\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"doc\":\"Products included in this channel\",\"default\":[]},{\"name\":\"account_ids\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"doc\":\"Present only for user channels; null otherwise\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ChannelAvro> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ChannelAvro> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ChannelAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ChannelAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ChannelAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ChannelAvro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ChannelAvro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ChannelAvro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ChannelAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Channel name, e.g. heartbeat, ticker */
  private java.lang.String name;
  /** Products included in this channel */
  private java.util.List<java.lang.String> product_ids;
  /** Present only for user channels; null otherwise */
  private java.util.List<java.lang.String> account_ids;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ChannelAvro() {}

  /**
   * All-args constructor.
   * @param name Channel name, e.g. heartbeat, ticker
   * @param product_ids Products included in this channel
   * @param account_ids Present only for user channels; null otherwise
   */
  public ChannelAvro(java.lang.String name, java.util.List<java.lang.String> product_ids, java.util.List<java.lang.String> account_ids) {
    this.name = name;
    this.product_ids = product_ids;
    this.account_ids = account_ids;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return product_ids;
    case 2: return account_ids;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = value$ != null ? value$.toString() : null; break;
    case 1: product_ids = (java.util.List<java.lang.String>)value$; break;
    case 2: account_ids = (java.util.List<java.lang.String>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return Channel name, e.g. heartbeat, ticker
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * Channel name, e.g. heartbeat, ticker
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'product_ids' field.
   * @return Products included in this channel
   */
  public java.util.List<java.lang.String> getProductIds() {
    return product_ids;
  }


  /**
   * Sets the value of the 'product_ids' field.
   * Products included in this channel
   * @param value the value to set.
   */
  public void setProductIds(java.util.List<java.lang.String> value) {
    this.product_ids = value;
  }

  /**
   * Gets the value of the 'account_ids' field.
   * @return Present only for user channels; null otherwise
   */
  public java.util.List<java.lang.String> getAccountIds() {
    return account_ids;
  }


  /**
   * Sets the value of the 'account_ids' field.
   * Present only for user channels; null otherwise
   * @param value the value to set.
   */
  public void setAccountIds(java.util.List<java.lang.String> value) {
    this.account_ids = value;
  }

  /**
   * Creates a new ChannelAvro RecordBuilder.
   * @return A new ChannelAvro RecordBuilder
   */
  public static ChannelAvro.Builder newBuilder() {
    return new ChannelAvro.Builder();
  }

  /**
   * Creates a new ChannelAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ChannelAvro RecordBuilder
   */
  public static ChannelAvro.Builder newBuilder(ChannelAvro.Builder other) {
    if (other == null) {
      return new ChannelAvro.Builder();
    } else {
      return new ChannelAvro.Builder(other);
    }
  }

  /**
   * Creates a new ChannelAvro RecordBuilder by copying an existing ChannelAvro instance.
   * @param other The existing instance to copy.
   * @return A new ChannelAvro RecordBuilder
   */
  public static ChannelAvro.Builder newBuilder(ChannelAvro other) {
    if (other == null) {
      return new ChannelAvro.Builder();
    } else {
      return new ChannelAvro.Builder(other);
    }
  }

  /**
   * RecordBuilder for ChannelAvro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ChannelAvro>
    implements org.apache.avro.data.RecordBuilder<ChannelAvro> {

    /** Channel name, e.g. heartbeat, ticker */
    private java.lang.String name;
    /** Products included in this channel */
    private java.util.List<java.lang.String> product_ids;
    /** Present only for user channels; null otherwise */
    private java.util.List<java.lang.String> account_ids;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ChannelAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.product_ids)) {
        this.product_ids = data().deepCopy(fields()[1].schema(), other.product_ids);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.account_ids)) {
        this.account_ids = data().deepCopy(fields()[2].schema(), other.account_ids);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing ChannelAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(ChannelAvro other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.product_ids)) {
        this.product_ids = data().deepCopy(fields()[1].schema(), other.product_ids);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.account_ids)) {
        this.account_ids = data().deepCopy(fields()[2].schema(), other.account_ids);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * Channel name, e.g. heartbeat, ticker
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * Channel name, e.g. heartbeat, ticker
      * @param value The value of 'name'.
      * @return This builder.
      */
    public ChannelAvro.Builder setName(java.lang.String value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * Channel name, e.g. heartbeat, ticker
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * Channel name, e.g. heartbeat, ticker
      * @return This builder.
      */
    public ChannelAvro.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'product_ids' field.
      * Products included in this channel
      * @return The value.
      */
    public java.util.List<java.lang.String> getProductIds() {
      return product_ids;
    }


    /**
      * Sets the value of the 'product_ids' field.
      * Products included in this channel
      * @param value The value of 'product_ids'.
      * @return This builder.
      */
    public ChannelAvro.Builder setProductIds(java.util.List<java.lang.String> value) {
      validate(fields()[1], value);
      this.product_ids = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'product_ids' field has been set.
      * Products included in this channel
      * @return True if the 'product_ids' field has been set, false otherwise.
      */
    public boolean hasProductIds() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'product_ids' field.
      * Products included in this channel
      * @return This builder.
      */
    public ChannelAvro.Builder clearProductIds() {
      product_ids = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'account_ids' field.
      * Present only for user channels; null otherwise
      * @return The value.
      */
    public java.util.List<java.lang.String> getAccountIds() {
      return account_ids;
    }


    /**
      * Sets the value of the 'account_ids' field.
      * Present only for user channels; null otherwise
      * @param value The value of 'account_ids'.
      * @return This builder.
      */
    public ChannelAvro.Builder setAccountIds(java.util.List<java.lang.String> value) {
      validate(fields()[2], value);
      this.account_ids = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'account_ids' field has been set.
      * Present only for user channels; null otherwise
      * @return True if the 'account_ids' field has been set, false otherwise.
      */
    public boolean hasAccountIds() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'account_ids' field.
      * Present only for user channels; null otherwise
      * @return This builder.
      */
    public ChannelAvro.Builder clearAccountIds() {
      account_ids = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ChannelAvro build() {
      try {
        ChannelAvro record = new ChannelAvro();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.String) defaultValue(fields()[0]);
        record.product_ids = fieldSetFlags()[1] ? this.product_ids : (java.util.List<java.lang.String>) defaultValue(fields()[1]);
        record.account_ids = fieldSetFlags()[2] ? this.account_ids : (java.util.List<java.lang.String>) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ChannelAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<ChannelAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ChannelAvro>
    READER$ = (org.apache.avro.io.DatumReader<ChannelAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.name);

    long size0 = this.product_ids.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.String e0: this.product_ids) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    if (this.account_ids == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size1 = this.account_ids.size();
      out.writeArrayStart();
      out.setItemCount(size1);
      long actualSize1 = 0;
      for (java.lang.String e1: this.account_ids) {
        actualSize1++;
        out.startItem();
        out.writeString(e1);
      }
      out.writeArrayEnd();
      if (actualSize1 != size1)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.name = in.readString();

      long size0 = in.readArrayStart();
      java.util.List<java.lang.String> a0 = this.product_ids;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.String>((int)size0, SCHEMA$.getField("product_ids").schema());
        this.product_ids = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.String e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString();
          a0.add(e0);
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.account_ids = null;
      } else {
        long size1 = in.readArrayStart();
        java.util.List<java.lang.String> a1 = this.account_ids;
        if (a1 == null) {
          a1 = new SpecificData.Array<java.lang.String>((int)size1, SCHEMA$.getField("account_ids").schema().getTypes().get(1));
          this.account_ids = a1;
        } else a1.clear();
        SpecificData.Array<java.lang.String> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a1 : null);
        for ( ; 0 < size1; size1 = in.arrayNext()) {
          for ( ; size1 != 0; size1--) {
            java.lang.String e1 = (ga1 != null ? ga1.peek() : null);
            e1 = in.readString();
            a1.add(e1);
          }
        }
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.name = in.readString();
          break;

        case 1:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.String> a0 = this.product_ids;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.String>((int)size0, SCHEMA$.getField("product_ids").schema());
            this.product_ids = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.String e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString();
              a0.add(e0);
            }
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.account_ids = null;
          } else {
            long size1 = in.readArrayStart();
            java.util.List<java.lang.String> a1 = this.account_ids;
            if (a1 == null) {
              a1 = new SpecificData.Array<java.lang.String>((int)size1, SCHEMA$.getField("account_ids").schema().getTypes().get(1));
              this.account_ids = a1;
            } else a1.clear();
            SpecificData.Array<java.lang.String> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a1 : null);
            for ( ; 0 < size1; size1 = in.arrayNext()) {
              for ( ; size1 != 0; size1--) {
                java.lang.String e1 = (ga1 != null ? ga1.peek() : null);
                e1 = in.readString();
                a1.add(e1);
              }
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










