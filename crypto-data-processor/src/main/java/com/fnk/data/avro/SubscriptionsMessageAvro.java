/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fnk.data.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Message Coinbase sends back after a successful subscription request. */
@org.apache.avro.specific.AvroGenerated
public class SubscriptionsMessageAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7001671194452600143L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SubscriptionsMessageAvro\",\"namespace\":\"com.fnk.model\",\"doc\":\"Message Coinbase sends back after a successful subscription request.\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Message category, e.g. \\\"subscriptions\\\"\"},{\"name\":\"channels\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ChannelAvro\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Channel name, e.g. heartbeat, ticker\"},{\"name\":\"product_ids\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"doc\":\"Products included in this channel\",\"default\":[]},{\"name\":\"account_ids\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"doc\":\"Present only for user channels; null otherwise\",\"default\":null}]}},\"doc\":\"List of channels confirmed by Coinbase\",\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SubscriptionsMessageAvro> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SubscriptionsMessageAvro> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SubscriptionsMessageAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SubscriptionsMessageAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SubscriptionsMessageAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SubscriptionsMessageAvro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SubscriptionsMessageAvro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SubscriptionsMessageAvro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SubscriptionsMessageAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Message category, e.g. "subscriptions" */
  private java.lang.String type;
  /** List of channels confirmed by Coinbase */
  private java.util.List<ChannelAvro> channels;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SubscriptionsMessageAvro() {}

  /**
   * All-args constructor.
   * @param type Message category, e.g. "subscriptions"
   * @param channels List of channels confirmed by Coinbase
   */
  public SubscriptionsMessageAvro(java.lang.String type, java.util.List<ChannelAvro> channels) {
    this.type = type;
    this.channels = channels;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return channels;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: type = value$ != null ? value$.toString() : null; break;
    case 1: channels = (java.util.List<ChannelAvro>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'type' field.
   * @return Message category, e.g. "subscriptions"
   */
  public java.lang.String getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * Message category, e.g. "subscriptions"
   * @param value the value to set.
   */
  public void setType(java.lang.String value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'channels' field.
   * @return List of channels confirmed by Coinbase
   */
  public java.util.List<ChannelAvro> getChannels() {
    return channels;
  }


  /**
   * Sets the value of the 'channels' field.
   * List of channels confirmed by Coinbase
   * @param value the value to set.
   */
  public void setChannels(java.util.List<ChannelAvro> value) {
    this.channels = value;
  }

  /**
   * Creates a new SubscriptionsMessageAvro RecordBuilder.
   * @return A new SubscriptionsMessageAvro RecordBuilder
   */
  public static SubscriptionsMessageAvro.Builder newBuilder() {
    return new SubscriptionsMessageAvro.Builder();
  }

  /**
   * Creates a new SubscriptionsMessageAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SubscriptionsMessageAvro RecordBuilder
   */
  public static SubscriptionsMessageAvro.Builder newBuilder(SubscriptionsMessageAvro.Builder other) {
    if (other == null) {
      return new SubscriptionsMessageAvro.Builder();
    } else {
      return new SubscriptionsMessageAvro.Builder(other);
    }
  }

  /**
   * Creates a new SubscriptionsMessageAvro RecordBuilder by copying an existing SubscriptionsMessageAvro instance.
   * @param other The existing instance to copy.
   * @return A new SubscriptionsMessageAvro RecordBuilder
   */
  public static SubscriptionsMessageAvro.Builder newBuilder(SubscriptionsMessageAvro other) {
    if (other == null) {
      return new SubscriptionsMessageAvro.Builder();
    } else {
      return new SubscriptionsMessageAvro.Builder(other);
    }
  }

  /**
   * RecordBuilder for SubscriptionsMessageAvro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SubscriptionsMessageAvro>
    implements org.apache.avro.data.RecordBuilder<SubscriptionsMessageAvro> {

    /** Message category, e.g. "subscriptions" */
    private java.lang.String type;
    /** List of channels confirmed by Coinbase */
    private java.util.List<ChannelAvro> channels;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(SubscriptionsMessageAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.channels)) {
        this.channels = data().deepCopy(fields()[1].schema(), other.channels);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing SubscriptionsMessageAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(SubscriptionsMessageAvro other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.channels)) {
        this.channels = data().deepCopy(fields()[1].schema(), other.channels);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'type' field.
      * Message category, e.g. "subscriptions"
      * @return The value.
      */
    public java.lang.String getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * Message category, e.g. "subscriptions"
      * @param value The value of 'type'.
      * @return This builder.
      */
    public SubscriptionsMessageAvro.Builder setType(java.lang.String value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * Message category, e.g. "subscriptions"
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'type' field.
      * Message category, e.g. "subscriptions"
      * @return This builder.
      */
    public SubscriptionsMessageAvro.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'channels' field.
      * List of channels confirmed by Coinbase
      * @return The value.
      */
    public java.util.List<ChannelAvro> getChannels() {
      return channels;
    }


    /**
      * Sets the value of the 'channels' field.
      * List of channels confirmed by Coinbase
      * @param value The value of 'channels'.
      * @return This builder.
      */
    public SubscriptionsMessageAvro.Builder setChannels(java.util.List<ChannelAvro> value) {
      validate(fields()[1], value);
      this.channels = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'channels' field has been set.
      * List of channels confirmed by Coinbase
      * @return True if the 'channels' field has been set, false otherwise.
      */
    public boolean hasChannels() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'channels' field.
      * List of channels confirmed by Coinbase
      * @return This builder.
      */
    public SubscriptionsMessageAvro.Builder clearChannels() {
      channels = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SubscriptionsMessageAvro build() {
      try {
        SubscriptionsMessageAvro record = new SubscriptionsMessageAvro();
        record.type = fieldSetFlags()[0] ? this.type : (java.lang.String) defaultValue(fields()[0]);
        record.channels = fieldSetFlags()[1] ? this.channels : (java.util.List<ChannelAvro>) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SubscriptionsMessageAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<SubscriptionsMessageAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SubscriptionsMessageAvro>
    READER$ = (org.apache.avro.io.DatumReader<SubscriptionsMessageAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.type);

    long size0 = this.channels.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (ChannelAvro e0: this.channels) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.type = in.readString();

      long size0 = in.readArrayStart();
      java.util.List<ChannelAvro> a0 = this.channels;
      if (a0 == null) {
        a0 = new SpecificData.Array<ChannelAvro>((int)size0, SCHEMA$.getField("channels").schema());
        this.channels = a0;
      } else a0.clear();
      SpecificData.Array<ChannelAvro> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<ChannelAvro>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          ChannelAvro e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new ChannelAvro();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.type = in.readString();
          break;

        case 1:
          long size0 = in.readArrayStart();
          java.util.List<ChannelAvro> a0 = this.channels;
          if (a0 == null) {
            a0 = new SpecificData.Array<ChannelAvro>((int)size0, SCHEMA$.getField("channels").schema());
            this.channels = a0;
          } else a0.clear();
          SpecificData.Array<ChannelAvro> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<ChannelAvro>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              ChannelAvro e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new ChannelAvro();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










