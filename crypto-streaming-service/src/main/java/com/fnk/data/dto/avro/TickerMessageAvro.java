/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fnk.data.dto.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Real-time price/size snapshot emitted by Coinbase’s “ticker” channel whenever a trade occurs. */
@org.apache.avro.specific.AvroGenerated
public class TickerMessageAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6544573863620573385L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TickerMessageAvro\",\"namespace\":\"com.fnk.data.dto.avro\",\"doc\":\"Real-time price/size snapshot emitted by Coinbase’s “ticker” channel whenever a trade occurs.\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Always the literal string \\\"ticker\\\".\"},{\"name\":\"sequence\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"A monotonically increasing counter across the entire feed.\"},{\"name\":\"product_id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Trading pair this update refers to, e.g. \\\"BTC-USD\\\".\"},{\"name\":\"time\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"ISO-8601 timestamp (UTC) when Coinbase generated the message.\"},{\"name\":\"price\",\"type\":\"double\",\"doc\":\"Last trade price.\"},{\"name\":\"open_24h\",\"type\":\"double\",\"doc\":\"Price 24 h ago (opening of the rolling window).\"},{\"name\":\"volume_24h\",\"type\":\"double\",\"doc\":\"Total traded volume in the last 24 h.\"},{\"name\":\"low_24h\",\"type\":\"double\",\"doc\":\"Lowest trade price in the last 24 h.\"},{\"name\":\"high_24h\",\"type\":\"double\",\"doc\":\"Highest trade price in the last 24 h.\"},{\"name\":\"volume_30d\",\"type\":\"double\",\"doc\":\"Total traded volume in the last 30 days.\"},{\"name\":\"best_bid\",\"type\":\"double\",\"doc\":\"Current best bid price.\"},{\"name\":\"best_bid_size\",\"type\":\"double\",\"doc\":\"Size available at the best bid price.\"},{\"name\":\"best_ask\",\"type\":\"double\",\"doc\":\"Current best ask price.\"},{\"name\":\"best_ask_size\",\"type\":\"double\",\"doc\":\"Size available at the best ask price.\"},{\"name\":\"side\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"\\\"buy\\\" if aggressor bought, \\\"sell\\\" if aggressor sold.\"},{\"name\":\"trade_id\",\"type\":\"long\",\"doc\":\"Coinbase-assigned unique ID of the last trade.\"},{\"name\":\"last_size\",\"type\":\"double\",\"doc\":\"Quantity traded in the last match.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TickerMessageAvro> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TickerMessageAvro> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TickerMessageAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TickerMessageAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TickerMessageAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TickerMessageAvro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TickerMessageAvro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TickerMessageAvro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TickerMessageAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Always the literal string "ticker". */
  private java.lang.String type;
  /** A monotonically increasing counter across the entire feed. */
  private java.lang.String sequence;
  /** Trading pair this update refers to, e.g. "BTC-USD". */
  private java.lang.String product_id;
  /** ISO-8601 timestamp (UTC) when Coinbase generated the message. */
  private java.lang.String time;
  /** Last trade price. */
  private double price;
  /** Price 24 h ago (opening of the rolling window). */
  private double open_24h;
  /** Total traded volume in the last 24 h. */
  private double volume_24h;
  /** Lowest trade price in the last 24 h. */
  private double low_24h;
  /** Highest trade price in the last 24 h. */
  private double high_24h;
  /** Total traded volume in the last 30 days. */
  private double volume_30d;
  /** Current best bid price. */
  private double best_bid;
  /** Size available at the best bid price. */
  private double best_bid_size;
  /** Current best ask price. */
  private double best_ask;
  /** Size available at the best ask price. */
  private double best_ask_size;
  /** "buy" if aggressor bought, "sell" if aggressor sold. */
  private java.lang.String side;
  /** Coinbase-assigned unique ID of the last trade. */
  private long trade_id;
  /** Quantity traded in the last match. */
  private double last_size;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TickerMessageAvro() {}

  /**
   * All-args constructor.
   * @param type Always the literal string "ticker".
   * @param sequence A monotonically increasing counter across the entire feed.
   * @param product_id Trading pair this update refers to, e.g. "BTC-USD".
   * @param time ISO-8601 timestamp (UTC) when Coinbase generated the message.
   * @param price Last trade price.
   * @param open_24h Price 24 h ago (opening of the rolling window).
   * @param volume_24h Total traded volume in the last 24 h.
   * @param low_24h Lowest trade price in the last 24 h.
   * @param high_24h Highest trade price in the last 24 h.
   * @param volume_30d Total traded volume in the last 30 days.
   * @param best_bid Current best bid price.
   * @param best_bid_size Size available at the best bid price.
   * @param best_ask Current best ask price.
   * @param best_ask_size Size available at the best ask price.
   * @param side "buy" if aggressor bought, "sell" if aggressor sold.
   * @param trade_id Coinbase-assigned unique ID of the last trade.
   * @param last_size Quantity traded in the last match.
   */
  public TickerMessageAvro(java.lang.String type, java.lang.String sequence, java.lang.String product_id, java.lang.String time, java.lang.Double price, java.lang.Double open_24h, java.lang.Double volume_24h, java.lang.Double low_24h, java.lang.Double high_24h, java.lang.Double volume_30d, java.lang.Double best_bid, java.lang.Double best_bid_size, java.lang.Double best_ask, java.lang.Double best_ask_size, java.lang.String side, java.lang.Long trade_id, java.lang.Double last_size) {
    this.type = type;
    this.sequence = sequence;
    this.product_id = product_id;
    this.time = time;
    this.price = price;
    this.open_24h = open_24h;
    this.volume_24h = volume_24h;
    this.low_24h = low_24h;
    this.high_24h = high_24h;
    this.volume_30d = volume_30d;
    this.best_bid = best_bid;
    this.best_bid_size = best_bid_size;
    this.best_ask = best_ask;
    this.best_ask_size = best_ask_size;
    this.side = side;
    this.trade_id = trade_id;
    this.last_size = last_size;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return sequence;
    case 2: return product_id;
    case 3: return time;
    case 4: return price;
    case 5: return open_24h;
    case 6: return volume_24h;
    case 7: return low_24h;
    case 8: return high_24h;
    case 9: return volume_30d;
    case 10: return best_bid;
    case 11: return best_bid_size;
    case 12: return best_ask;
    case 13: return best_ask_size;
    case 14: return side;
    case 15: return trade_id;
    case 16: return last_size;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: type = value$ != null ? value$.toString() : null; break;
    case 1: sequence = value$ != null ? value$.toString() : null; break;
    case 2: product_id = value$ != null ? value$.toString() : null; break;
    case 3: time = value$ != null ? value$.toString() : null; break;
    case 4: price = (java.lang.Double)value$; break;
    case 5: open_24h = (java.lang.Double)value$; break;
    case 6: volume_24h = (java.lang.Double)value$; break;
    case 7: low_24h = (java.lang.Double)value$; break;
    case 8: high_24h = (java.lang.Double)value$; break;
    case 9: volume_30d = (java.lang.Double)value$; break;
    case 10: best_bid = (java.lang.Double)value$; break;
    case 11: best_bid_size = (java.lang.Double)value$; break;
    case 12: best_ask = (java.lang.Double)value$; break;
    case 13: best_ask_size = (java.lang.Double)value$; break;
    case 14: side = value$ != null ? value$.toString() : null; break;
    case 15: trade_id = (java.lang.Long)value$; break;
    case 16: last_size = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'type' field.
   * @return Always the literal string "ticker".
   */
  public java.lang.String getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * Always the literal string "ticker".
   * @param value the value to set.
   */
  public void setType(java.lang.String value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'sequence' field.
   * @return A monotonically increasing counter across the entire feed.
   */
  public java.lang.String getSequence() {
    return sequence;
  }


  /**
   * Sets the value of the 'sequence' field.
   * A monotonically increasing counter across the entire feed.
   * @param value the value to set.
   */
  public void setSequence(java.lang.String value) {
    this.sequence = value;
  }

  /**
   * Gets the value of the 'product_id' field.
   * @return Trading pair this update refers to, e.g. "BTC-USD".
   */
  public java.lang.String getProductId() {
    return product_id;
  }


  /**
   * Sets the value of the 'product_id' field.
   * Trading pair this update refers to, e.g. "BTC-USD".
   * @param value the value to set.
   */
  public void setProductId(java.lang.String value) {
    this.product_id = value;
  }

  /**
   * Gets the value of the 'time' field.
   * @return ISO-8601 timestamp (UTC) when Coinbase generated the message.
   */
  public java.lang.String getTime() {
    return time;
  }


  /**
   * Sets the value of the 'time' field.
   * ISO-8601 timestamp (UTC) when Coinbase generated the message.
   * @param value the value to set.
   */
  public void setTime(java.lang.String value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return Last trade price.
   */
  public double getPrice() {
    return price;
  }


  /**
   * Sets the value of the 'price' field.
   * Last trade price.
   * @param value the value to set.
   */
  public void setPrice(double value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'open_24h' field.
   * @return Price 24 h ago (opening of the rolling window).
   */
  public double getOpen24h() {
    return open_24h;
  }


  /**
   * Sets the value of the 'open_24h' field.
   * Price 24 h ago (opening of the rolling window).
   * @param value the value to set.
   */
  public void setOpen24h(double value) {
    this.open_24h = value;
  }

  /**
   * Gets the value of the 'volume_24h' field.
   * @return Total traded volume in the last 24 h.
   */
  public double getVolume24h() {
    return volume_24h;
  }


  /**
   * Sets the value of the 'volume_24h' field.
   * Total traded volume in the last 24 h.
   * @param value the value to set.
   */
  public void setVolume24h(double value) {
    this.volume_24h = value;
  }

  /**
   * Gets the value of the 'low_24h' field.
   * @return Lowest trade price in the last 24 h.
   */
  public double getLow24h() {
    return low_24h;
  }


  /**
   * Sets the value of the 'low_24h' field.
   * Lowest trade price in the last 24 h.
   * @param value the value to set.
   */
  public void setLow24h(double value) {
    this.low_24h = value;
  }

  /**
   * Gets the value of the 'high_24h' field.
   * @return Highest trade price in the last 24 h.
   */
  public double getHigh24h() {
    return high_24h;
  }


  /**
   * Sets the value of the 'high_24h' field.
   * Highest trade price in the last 24 h.
   * @param value the value to set.
   */
  public void setHigh24h(double value) {
    this.high_24h = value;
  }

  /**
   * Gets the value of the 'volume_30d' field.
   * @return Total traded volume in the last 30 days.
   */
  public double getVolume30d() {
    return volume_30d;
  }


  /**
   * Sets the value of the 'volume_30d' field.
   * Total traded volume in the last 30 days.
   * @param value the value to set.
   */
  public void setVolume30d(double value) {
    this.volume_30d = value;
  }

  /**
   * Gets the value of the 'best_bid' field.
   * @return Current best bid price.
   */
  public double getBestBid() {
    return best_bid;
  }


  /**
   * Sets the value of the 'best_bid' field.
   * Current best bid price.
   * @param value the value to set.
   */
  public void setBestBid(double value) {
    this.best_bid = value;
  }

  /**
   * Gets the value of the 'best_bid_size' field.
   * @return Size available at the best bid price.
   */
  public double getBestBidSize() {
    return best_bid_size;
  }


  /**
   * Sets the value of the 'best_bid_size' field.
   * Size available at the best bid price.
   * @param value the value to set.
   */
  public void setBestBidSize(double value) {
    this.best_bid_size = value;
  }

  /**
   * Gets the value of the 'best_ask' field.
   * @return Current best ask price.
   */
  public double getBestAsk() {
    return best_ask;
  }


  /**
   * Sets the value of the 'best_ask' field.
   * Current best ask price.
   * @param value the value to set.
   */
  public void setBestAsk(double value) {
    this.best_ask = value;
  }

  /**
   * Gets the value of the 'best_ask_size' field.
   * @return Size available at the best ask price.
   */
  public double getBestAskSize() {
    return best_ask_size;
  }


  /**
   * Sets the value of the 'best_ask_size' field.
   * Size available at the best ask price.
   * @param value the value to set.
   */
  public void setBestAskSize(double value) {
    this.best_ask_size = value;
  }

  /**
   * Gets the value of the 'side' field.
   * @return "buy" if aggressor bought, "sell" if aggressor sold.
   */
  public java.lang.String getSide() {
    return side;
  }


  /**
   * Sets the value of the 'side' field.
   * "buy" if aggressor bought, "sell" if aggressor sold.
   * @param value the value to set.
   */
  public void setSide(java.lang.String value) {
    this.side = value;
  }

  /**
   * Gets the value of the 'trade_id' field.
   * @return Coinbase-assigned unique ID of the last trade.
   */
  public long getTradeId() {
    return trade_id;
  }


  /**
   * Sets the value of the 'trade_id' field.
   * Coinbase-assigned unique ID of the last trade.
   * @param value the value to set.
   */
  public void setTradeId(long value) {
    this.trade_id = value;
  }

  /**
   * Gets the value of the 'last_size' field.
   * @return Quantity traded in the last match.
   */
  public double getLastSize() {
    return last_size;
  }


  /**
   * Sets the value of the 'last_size' field.
   * Quantity traded in the last match.
   * @param value the value to set.
   */
  public void setLastSize(double value) {
    this.last_size = value;
  }

  /**
   * Creates a new TickerMessageAvro RecordBuilder.
   * @return A new TickerMessageAvro RecordBuilder
   */
  public static com.fnk.data.dto.avro.TickerMessageAvro.Builder newBuilder() {
    return new com.fnk.data.dto.avro.TickerMessageAvro.Builder();
  }

  /**
   * Creates a new TickerMessageAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TickerMessageAvro RecordBuilder
   */
  public static com.fnk.data.dto.avro.TickerMessageAvro.Builder newBuilder(com.fnk.data.dto.avro.TickerMessageAvro.Builder other) {
    if (other == null) {
      return new com.fnk.data.dto.avro.TickerMessageAvro.Builder();
    } else {
      return new com.fnk.data.dto.avro.TickerMessageAvro.Builder(other);
    }
  }

  /**
   * Creates a new TickerMessageAvro RecordBuilder by copying an existing TickerMessageAvro instance.
   * @param other The existing instance to copy.
   * @return A new TickerMessageAvro RecordBuilder
   */
  public static com.fnk.data.dto.avro.TickerMessageAvro.Builder newBuilder(com.fnk.data.dto.avro.TickerMessageAvro other) {
    if (other == null) {
      return new com.fnk.data.dto.avro.TickerMessageAvro.Builder();
    } else {
      return new com.fnk.data.dto.avro.TickerMessageAvro.Builder(other);
    }
  }

  /**
   * RecordBuilder for TickerMessageAvro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TickerMessageAvro>
    implements org.apache.avro.data.RecordBuilder<TickerMessageAvro> {

    /** Always the literal string "ticker". */
    private java.lang.String type;
    /** A monotonically increasing counter across the entire feed. */
    private java.lang.String sequence;
    /** Trading pair this update refers to, e.g. "BTC-USD". */
    private java.lang.String product_id;
    /** ISO-8601 timestamp (UTC) when Coinbase generated the message. */
    private java.lang.String time;
    /** Last trade price. */
    private double price;
    /** Price 24 h ago (opening of the rolling window). */
    private double open_24h;
    /** Total traded volume in the last 24 h. */
    private double volume_24h;
    /** Lowest trade price in the last 24 h. */
    private double low_24h;
    /** Highest trade price in the last 24 h. */
    private double high_24h;
    /** Total traded volume in the last 30 days. */
    private double volume_30d;
    /** Current best bid price. */
    private double best_bid;
    /** Size available at the best bid price. */
    private double best_bid_size;
    /** Current best ask price. */
    private double best_ask;
    /** Size available at the best ask price. */
    private double best_ask_size;
    /** "buy" if aggressor bought, "sell" if aggressor sold. */
    private java.lang.String side;
    /** Coinbase-assigned unique ID of the last trade. */
    private long trade_id;
    /** Quantity traded in the last match. */
    private double last_size;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fnk.data.dto.avro.TickerMessageAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.sequence)) {
        this.sequence = data().deepCopy(fields()[1].schema(), other.sequence);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.product_id)) {
        this.product_id = data().deepCopy(fields()[2].schema(), other.product_id);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.time)) {
        this.time = data().deepCopy(fields()[3].schema(), other.time);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.price)) {
        this.price = data().deepCopy(fields()[4].schema(), other.price);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.open_24h)) {
        this.open_24h = data().deepCopy(fields()[5].schema(), other.open_24h);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.volume_24h)) {
        this.volume_24h = data().deepCopy(fields()[6].schema(), other.volume_24h);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.low_24h)) {
        this.low_24h = data().deepCopy(fields()[7].schema(), other.low_24h);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.high_24h)) {
        this.high_24h = data().deepCopy(fields()[8].schema(), other.high_24h);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.volume_30d)) {
        this.volume_30d = data().deepCopy(fields()[9].schema(), other.volume_30d);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.best_bid)) {
        this.best_bid = data().deepCopy(fields()[10].schema(), other.best_bid);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.best_bid_size)) {
        this.best_bid_size = data().deepCopy(fields()[11].schema(), other.best_bid_size);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.best_ask)) {
        this.best_ask = data().deepCopy(fields()[12].schema(), other.best_ask);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.best_ask_size)) {
        this.best_ask_size = data().deepCopy(fields()[13].schema(), other.best_ask_size);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.side)) {
        this.side = data().deepCopy(fields()[14].schema(), other.side);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.trade_id)) {
        this.trade_id = data().deepCopy(fields()[15].schema(), other.trade_id);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.last_size)) {
        this.last_size = data().deepCopy(fields()[16].schema(), other.last_size);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
    }

    /**
     * Creates a Builder by copying an existing TickerMessageAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fnk.data.dto.avro.TickerMessageAvro other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sequence)) {
        this.sequence = data().deepCopy(fields()[1].schema(), other.sequence);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.product_id)) {
        this.product_id = data().deepCopy(fields()[2].schema(), other.product_id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.time)) {
        this.time = data().deepCopy(fields()[3].schema(), other.time);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.price)) {
        this.price = data().deepCopy(fields()[4].schema(), other.price);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.open_24h)) {
        this.open_24h = data().deepCopy(fields()[5].schema(), other.open_24h);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.volume_24h)) {
        this.volume_24h = data().deepCopy(fields()[6].schema(), other.volume_24h);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.low_24h)) {
        this.low_24h = data().deepCopy(fields()[7].schema(), other.low_24h);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.high_24h)) {
        this.high_24h = data().deepCopy(fields()[8].schema(), other.high_24h);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.volume_30d)) {
        this.volume_30d = data().deepCopy(fields()[9].schema(), other.volume_30d);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.best_bid)) {
        this.best_bid = data().deepCopy(fields()[10].schema(), other.best_bid);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.best_bid_size)) {
        this.best_bid_size = data().deepCopy(fields()[11].schema(), other.best_bid_size);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.best_ask)) {
        this.best_ask = data().deepCopy(fields()[12].schema(), other.best_ask);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.best_ask_size)) {
        this.best_ask_size = data().deepCopy(fields()[13].schema(), other.best_ask_size);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.side)) {
        this.side = data().deepCopy(fields()[14].schema(), other.side);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.trade_id)) {
        this.trade_id = data().deepCopy(fields()[15].schema(), other.trade_id);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.last_size)) {
        this.last_size = data().deepCopy(fields()[16].schema(), other.last_size);
        fieldSetFlags()[16] = true;
      }
    }

    /**
      * Gets the value of the 'type' field.
      * Always the literal string "ticker".
      * @return The value.
      */
    public java.lang.String getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * Always the literal string "ticker".
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.fnk.data.dto.avro.TickerMessageAvro.Builder setType(java.lang.String value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * Always the literal string "ticker".
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'type' field.
      * Always the literal string "ticker".
      * @return This builder.
      */
    public com.fnk.data.dto.avro.TickerMessageAvro.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sequence' field.
      * A monotonically increasing counter across the entire feed.
      * @return The value.
      */
    public java.lang.String getSequence() {
      return sequence;
    }


    /**
      * Sets the value of the 'sequence' field.
      * A monotonically increasing counter across the entire feed.
      * @param value The value of 'sequence'.
      * @return This builder.
      */
    public com.fnk.data.dto.avro.TickerMessageAvro.Builder setSequence(java.lang.String value) {
      validate(fields()[1], value);
      this.sequence = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sequence' field has been set.
      * A monotonically increasing counter across the entire feed.
      * @return True if the 'sequence' field has been set, false otherwise.
      */
    public boolean hasSequence() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sequence' field.
      * A monotonically increasing counter across the entire feed.
      * @return This builder.
      */
    public com.fnk.data.dto.avro.TickerMessageAvro.Builder clearSequence() {
      sequence = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'product_id' field.
      * Trading pair this update refers to, e.g. "BTC-USD".
      * @return The value.
      */
    public java.lang.String getProductId() {
      return product_id;
    }


    /**
      * Sets the value of the 'product_id' field.
      * Trading pair this update refers to, e.g. "BTC-USD".
      * @param value The value of 'product_id'.
      * @return This builder.
      */
    public com.fnk.data.dto.avro.TickerMessageAvro.Builder setProductId(java.lang.String value) {
      validate(fields()[2], value);
      this.product_id = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'product_id' field has been set.
      * Trading pair this update refers to, e.g. "BTC-USD".
      * @return True if the 'product_id' field has been set, false otherwise.
      */
    public boolean hasProductId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'product_id' field.
      * Trading pair this update refers to, e.g. "BTC-USD".
      * @return This builder.
      */
    public com.fnk.data.dto.avro.TickerMessageAvro.Builder clearProductId() {
      product_id = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'time' field.
      * ISO-8601 timestamp (UTC) when Coinbase generated the message.
      * @return The value.
      */
    public java.lang.String getTime() {
      return time;
    }


    /**
      * Sets the value of the 'time' field.
      * ISO-8601 timestamp (UTC) when Coinbase generated the message.
      * @param value The value of 'time'.
      * @return This builder.
      */
    public com.fnk.data.dto.avro.TickerMessageAvro.Builder setTime(java.lang.String value) {
      validate(fields()[3], value);
      this.time = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * ISO-8601 timestamp (UTC) when Coinbase generated the message.
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'time' field.
      * ISO-8601 timestamp (UTC) when Coinbase generated the message.
      * @return This builder.
      */
    public com.fnk.data.dto.avro.TickerMessageAvro.Builder clearTime() {
      time = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * Last trade price.
      * @return The value.
      */
    public double getPrice() {
      return price;
    }


    /**
      * Sets the value of the 'price' field.
      * Last trade price.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.fnk.data.dto.avro.TickerMessageAvro.Builder setPrice(double value) {
      validate(fields()[4], value);
      this.price = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * Last trade price.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'price' field.
      * Last trade price.
      * @return This builder.
      */
    public com.fnk.data.dto.avro.TickerMessageAvro.Builder clearPrice() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'open_24h' field.
      * Price 24 h ago (opening of the rolling window).
      * @return The value.
      */
    public double getOpen24h() {
      return open_24h;
    }


    /**
      * Sets the value of the 'open_24h' field.
      * Price 24 h ago (opening of the rolling window).
      * @param value The value of 'open_24h'.
      * @return This builder.
      */
    public com.fnk.data.dto.avro.TickerMessageAvro.Builder setOpen24h(double value) {
      validate(fields()[5], value);
      this.open_24h = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'open_24h' field has been set.
      * Price 24 h ago (opening of the rolling window).
      * @return True if the 'open_24h' field has been set, false otherwise.
      */
    public boolean hasOpen24h() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'open_24h' field.
      * Price 24 h ago (opening of the rolling window).
      * @return This builder.
      */
    public com.fnk.data.dto.avro.TickerMessageAvro.Builder clearOpen24h() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'volume_24h' field.
      * Total traded volume in the last 24 h.
      * @return The value.
      */
    public double getVolume24h() {
      return volume_24h;
    }


    /**
      * Sets the value of the 'volume_24h' field.
      * Total traded volume in the last 24 h.
      * @param value The value of 'volume_24h'.
      * @return This builder.
      */
    public com.fnk.data.dto.avro.TickerMessageAvro.Builder setVolume24h(double value) {
      validate(fields()[6], value);
      this.volume_24h = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'volume_24h' field has been set.
      * Total traded volume in the last 24 h.
      * @return True if the 'volume_24h' field has been set, false otherwise.
      */
    public boolean hasVolume24h() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'volume_24h' field.
      * Total traded volume in the last 24 h.
      * @return This builder.
      */
    public com.fnk.data.dto.avro.TickerMessageAvro.Builder clearVolume24h() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'low_24h' field.
      * Lowest trade price in the last 24 h.
      * @return The value.
      */
    public double getLow24h() {
      return low_24h;
    }


    /**
      * Sets the value of the 'low_24h' field.
      * Lowest trade price in the last 24 h.
      * @param value The value of 'low_24h'.
      * @return This builder.
      */
    public com.fnk.data.dto.avro.TickerMessageAvro.Builder setLow24h(double value) {
      validate(fields()[7], value);
      this.low_24h = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'low_24h' field has been set.
      * Lowest trade price in the last 24 h.
      * @return True if the 'low_24h' field has been set, false otherwise.
      */
    public boolean hasLow24h() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'low_24h' field.
      * Lowest trade price in the last 24 h.
      * @return This builder.
      */
    public com.fnk.data.dto.avro.TickerMessageAvro.Builder clearLow24h() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'high_24h' field.
      * Highest trade price in the last 24 h.
      * @return The value.
      */
    public double getHigh24h() {
      return high_24h;
    }


    /**
      * Sets the value of the 'high_24h' field.
      * Highest trade price in the last 24 h.
      * @param value The value of 'high_24h'.
      * @return This builder.
      */
    public com.fnk.data.dto.avro.TickerMessageAvro.Builder setHigh24h(double value) {
      validate(fields()[8], value);
      this.high_24h = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'high_24h' field has been set.
      * Highest trade price in the last 24 h.
      * @return True if the 'high_24h' field has been set, false otherwise.
      */
    public boolean hasHigh24h() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'high_24h' field.
      * Highest trade price in the last 24 h.
      * @return This builder.
      */
    public com.fnk.data.dto.avro.TickerMessageAvro.Builder clearHigh24h() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'volume_30d' field.
      * Total traded volume in the last 30 days.
      * @return The value.
      */
    public double getVolume30d() {
      return volume_30d;
    }


    /**
      * Sets the value of the 'volume_30d' field.
      * Total traded volume in the last 30 days.
      * @param value The value of 'volume_30d'.
      * @return This builder.
      */
    public com.fnk.data.dto.avro.TickerMessageAvro.Builder setVolume30d(double value) {
      validate(fields()[9], value);
      this.volume_30d = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'volume_30d' field has been set.
      * Total traded volume in the last 30 days.
      * @return True if the 'volume_30d' field has been set, false otherwise.
      */
    public boolean hasVolume30d() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'volume_30d' field.
      * Total traded volume in the last 30 days.
      * @return This builder.
      */
    public com.fnk.data.dto.avro.TickerMessageAvro.Builder clearVolume30d() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'best_bid' field.
      * Current best bid price.
      * @return The value.
      */
    public double getBestBid() {
      return best_bid;
    }


    /**
      * Sets the value of the 'best_bid' field.
      * Current best bid price.
      * @param value The value of 'best_bid'.
      * @return This builder.
      */
    public com.fnk.data.dto.avro.TickerMessageAvro.Builder setBestBid(double value) {
      validate(fields()[10], value);
      this.best_bid = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'best_bid' field has been set.
      * Current best bid price.
      * @return True if the 'best_bid' field has been set, false otherwise.
      */
    public boolean hasBestBid() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'best_bid' field.
      * Current best bid price.
      * @return This builder.
      */
    public com.fnk.data.dto.avro.TickerMessageAvro.Builder clearBestBid() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'best_bid_size' field.
      * Size available at the best bid price.
      * @return The value.
      */
    public double getBestBidSize() {
      return best_bid_size;
    }


    /**
      * Sets the value of the 'best_bid_size' field.
      * Size available at the best bid price.
      * @param value The value of 'best_bid_size'.
      * @return This builder.
      */
    public com.fnk.data.dto.avro.TickerMessageAvro.Builder setBestBidSize(double value) {
      validate(fields()[11], value);
      this.best_bid_size = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'best_bid_size' field has been set.
      * Size available at the best bid price.
      * @return True if the 'best_bid_size' field has been set, false otherwise.
      */
    public boolean hasBestBidSize() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'best_bid_size' field.
      * Size available at the best bid price.
      * @return This builder.
      */
    public com.fnk.data.dto.avro.TickerMessageAvro.Builder clearBestBidSize() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'best_ask' field.
      * Current best ask price.
      * @return The value.
      */
    public double getBestAsk() {
      return best_ask;
    }


    /**
      * Sets the value of the 'best_ask' field.
      * Current best ask price.
      * @param value The value of 'best_ask'.
      * @return This builder.
      */
    public com.fnk.data.dto.avro.TickerMessageAvro.Builder setBestAsk(double value) {
      validate(fields()[12], value);
      this.best_ask = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'best_ask' field has been set.
      * Current best ask price.
      * @return True if the 'best_ask' field has been set, false otherwise.
      */
    public boolean hasBestAsk() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'best_ask' field.
      * Current best ask price.
      * @return This builder.
      */
    public com.fnk.data.dto.avro.TickerMessageAvro.Builder clearBestAsk() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'best_ask_size' field.
      * Size available at the best ask price.
      * @return The value.
      */
    public double getBestAskSize() {
      return best_ask_size;
    }


    /**
      * Sets the value of the 'best_ask_size' field.
      * Size available at the best ask price.
      * @param value The value of 'best_ask_size'.
      * @return This builder.
      */
    public com.fnk.data.dto.avro.TickerMessageAvro.Builder setBestAskSize(double value) {
      validate(fields()[13], value);
      this.best_ask_size = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'best_ask_size' field has been set.
      * Size available at the best ask price.
      * @return True if the 'best_ask_size' field has been set, false otherwise.
      */
    public boolean hasBestAskSize() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'best_ask_size' field.
      * Size available at the best ask price.
      * @return This builder.
      */
    public com.fnk.data.dto.avro.TickerMessageAvro.Builder clearBestAskSize() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'side' field.
      * "buy" if aggressor bought, "sell" if aggressor sold.
      * @return The value.
      */
    public java.lang.String getSide() {
      return side;
    }


    /**
      * Sets the value of the 'side' field.
      * "buy" if aggressor bought, "sell" if aggressor sold.
      * @param value The value of 'side'.
      * @return This builder.
      */
    public com.fnk.data.dto.avro.TickerMessageAvro.Builder setSide(java.lang.String value) {
      validate(fields()[14], value);
      this.side = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'side' field has been set.
      * "buy" if aggressor bought, "sell" if aggressor sold.
      * @return True if the 'side' field has been set, false otherwise.
      */
    public boolean hasSide() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'side' field.
      * "buy" if aggressor bought, "sell" if aggressor sold.
      * @return This builder.
      */
    public com.fnk.data.dto.avro.TickerMessageAvro.Builder clearSide() {
      side = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'trade_id' field.
      * Coinbase-assigned unique ID of the last trade.
      * @return The value.
      */
    public long getTradeId() {
      return trade_id;
    }


    /**
      * Sets the value of the 'trade_id' field.
      * Coinbase-assigned unique ID of the last trade.
      * @param value The value of 'trade_id'.
      * @return This builder.
      */
    public com.fnk.data.dto.avro.TickerMessageAvro.Builder setTradeId(long value) {
      validate(fields()[15], value);
      this.trade_id = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'trade_id' field has been set.
      * Coinbase-assigned unique ID of the last trade.
      * @return True if the 'trade_id' field has been set, false otherwise.
      */
    public boolean hasTradeId() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'trade_id' field.
      * Coinbase-assigned unique ID of the last trade.
      * @return This builder.
      */
    public com.fnk.data.dto.avro.TickerMessageAvro.Builder clearTradeId() {
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'last_size' field.
      * Quantity traded in the last match.
      * @return The value.
      */
    public double getLastSize() {
      return last_size;
    }


    /**
      * Sets the value of the 'last_size' field.
      * Quantity traded in the last match.
      * @param value The value of 'last_size'.
      * @return This builder.
      */
    public com.fnk.data.dto.avro.TickerMessageAvro.Builder setLastSize(double value) {
      validate(fields()[16], value);
      this.last_size = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'last_size' field has been set.
      * Quantity traded in the last match.
      * @return True if the 'last_size' field has been set, false otherwise.
      */
    public boolean hasLastSize() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'last_size' field.
      * Quantity traded in the last match.
      * @return This builder.
      */
    public com.fnk.data.dto.avro.TickerMessageAvro.Builder clearLastSize() {
      fieldSetFlags()[16] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TickerMessageAvro build() {
      try {
        TickerMessageAvro record = new TickerMessageAvro();
        record.type = fieldSetFlags()[0] ? this.type : (java.lang.String) defaultValue(fields()[0]);
        record.sequence = fieldSetFlags()[1] ? this.sequence : (java.lang.String) defaultValue(fields()[1]);
        record.product_id = fieldSetFlags()[2] ? this.product_id : (java.lang.String) defaultValue(fields()[2]);
        record.time = fieldSetFlags()[3] ? this.time : (java.lang.String) defaultValue(fields()[3]);
        record.price = fieldSetFlags()[4] ? this.price : (java.lang.Double) defaultValue(fields()[4]);
        record.open_24h = fieldSetFlags()[5] ? this.open_24h : (java.lang.Double) defaultValue(fields()[5]);
        record.volume_24h = fieldSetFlags()[6] ? this.volume_24h : (java.lang.Double) defaultValue(fields()[6]);
        record.low_24h = fieldSetFlags()[7] ? this.low_24h : (java.lang.Double) defaultValue(fields()[7]);
        record.high_24h = fieldSetFlags()[8] ? this.high_24h : (java.lang.Double) defaultValue(fields()[8]);
        record.volume_30d = fieldSetFlags()[9] ? this.volume_30d : (java.lang.Double) defaultValue(fields()[9]);
        record.best_bid = fieldSetFlags()[10] ? this.best_bid : (java.lang.Double) defaultValue(fields()[10]);
        record.best_bid_size = fieldSetFlags()[11] ? this.best_bid_size : (java.lang.Double) defaultValue(fields()[11]);
        record.best_ask = fieldSetFlags()[12] ? this.best_ask : (java.lang.Double) defaultValue(fields()[12]);
        record.best_ask_size = fieldSetFlags()[13] ? this.best_ask_size : (java.lang.Double) defaultValue(fields()[13]);
        record.side = fieldSetFlags()[14] ? this.side : (java.lang.String) defaultValue(fields()[14]);
        record.trade_id = fieldSetFlags()[15] ? this.trade_id : (java.lang.Long) defaultValue(fields()[15]);
        record.last_size = fieldSetFlags()[16] ? this.last_size : (java.lang.Double) defaultValue(fields()[16]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TickerMessageAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<TickerMessageAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TickerMessageAvro>
    READER$ = (org.apache.avro.io.DatumReader<TickerMessageAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.type);

    out.writeString(this.sequence);

    out.writeString(this.product_id);

    out.writeString(this.time);

    out.writeDouble(this.price);

    out.writeDouble(this.open_24h);

    out.writeDouble(this.volume_24h);

    out.writeDouble(this.low_24h);

    out.writeDouble(this.high_24h);

    out.writeDouble(this.volume_30d);

    out.writeDouble(this.best_bid);

    out.writeDouble(this.best_bid_size);

    out.writeDouble(this.best_ask);

    out.writeDouble(this.best_ask_size);

    out.writeString(this.side);

    out.writeLong(this.trade_id);

    out.writeDouble(this.last_size);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.type = in.readString();

      this.sequence = in.readString();

      this.product_id = in.readString();

      this.time = in.readString();

      this.price = in.readDouble();

      this.open_24h = in.readDouble();

      this.volume_24h = in.readDouble();

      this.low_24h = in.readDouble();

      this.high_24h = in.readDouble();

      this.volume_30d = in.readDouble();

      this.best_bid = in.readDouble();

      this.best_bid_size = in.readDouble();

      this.best_ask = in.readDouble();

      this.best_ask_size = in.readDouble();

      this.side = in.readString();

      this.trade_id = in.readLong();

      this.last_size = in.readDouble();

    } else {
      for (int i = 0; i < 17; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.type = in.readString();
          break;

        case 1:
          this.sequence = in.readString();
          break;

        case 2:
          this.product_id = in.readString();
          break;

        case 3:
          this.time = in.readString();
          break;

        case 4:
          this.price = in.readDouble();
          break;

        case 5:
          this.open_24h = in.readDouble();
          break;

        case 6:
          this.volume_24h = in.readDouble();
          break;

        case 7:
          this.low_24h = in.readDouble();
          break;

        case 8:
          this.high_24h = in.readDouble();
          break;

        case 9:
          this.volume_30d = in.readDouble();
          break;

        case 10:
          this.best_bid = in.readDouble();
          break;

        case 11:
          this.best_bid_size = in.readDouble();
          break;

        case 12:
          this.best_ask = in.readDouble();
          break;

        case 13:
          this.best_ask_size = in.readDouble();
          break;

        case 14:
          this.side = in.readString();
          break;

        case 15:
          this.trade_id = in.readLong();
          break;

        case 16:
          this.last_size = in.readDouble();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










