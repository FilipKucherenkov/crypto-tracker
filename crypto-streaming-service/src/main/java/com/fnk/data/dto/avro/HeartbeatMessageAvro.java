/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fnk.data.dto.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** One-per-second keep-alive emitted by Coinbase when you subscribe to the “heartbeat” channel. */
@org.apache.avro.specific.AvroGenerated
public class HeartbeatMessageAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7590738729746053207L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"HeartbeatMessageAvro\",\"namespace\":\"com.fnk.data.dto.avro\",\"doc\":\"One-per-second keep-alive emitted by Coinbase when you subscribe to the “heartbeat” channel.\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Always the literal string \\\"heartbeat\\\".\"},{\"name\":\"sequence\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"A monotonically increasing counter (unique across the entire feed).\"},{\"name\":\"product_id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Market symbol this heartbeat refers to, e.g. \\\"BTC-USD\\\".\"},{\"name\":\"time\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Timestamp Coinbase generated the message (ISO-8601, UTC).\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<HeartbeatMessageAvro> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<HeartbeatMessageAvro> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<HeartbeatMessageAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<HeartbeatMessageAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<HeartbeatMessageAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this HeartbeatMessageAvro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a HeartbeatMessageAvro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a HeartbeatMessageAvro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static HeartbeatMessageAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Always the literal string "heartbeat". */
  private java.lang.String type;
  /** A monotonically increasing counter (unique across the entire feed). */
  private java.lang.String sequence;
  /** Market symbol this heartbeat refers to, e.g. "BTC-USD". */
  private java.lang.String product_id;
  /** Timestamp Coinbase generated the message (ISO-8601, UTC). */
  private java.lang.String time;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public HeartbeatMessageAvro() {}

  /**
   * All-args constructor.
   * @param type Always the literal string "heartbeat".
   * @param sequence A monotonically increasing counter (unique across the entire feed).
   * @param product_id Market symbol this heartbeat refers to, e.g. "BTC-USD".
   * @param time Timestamp Coinbase generated the message (ISO-8601, UTC).
   */
  public HeartbeatMessageAvro(java.lang.String type, java.lang.String sequence, java.lang.String product_id, java.lang.String time) {
    this.type = type;
    this.sequence = sequence;
    this.product_id = product_id;
    this.time = time;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return sequence;
    case 2: return product_id;
    case 3: return time;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: type = value$ != null ? value$.toString() : null; break;
    case 1: sequence = value$ != null ? value$.toString() : null; break;
    case 2: product_id = value$ != null ? value$.toString() : null; break;
    case 3: time = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'type' field.
   * @return Always the literal string "heartbeat".
   */
  public java.lang.String getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * Always the literal string "heartbeat".
   * @param value the value to set.
   */
  public void setType(java.lang.String value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'sequence' field.
   * @return A monotonically increasing counter (unique across the entire feed).
   */
  public java.lang.String getSequence() {
    return sequence;
  }


  /**
   * Sets the value of the 'sequence' field.
   * A monotonically increasing counter (unique across the entire feed).
   * @param value the value to set.
   */
  public void setSequence(java.lang.String value) {
    this.sequence = value;
  }

  /**
   * Gets the value of the 'product_id' field.
   * @return Market symbol this heartbeat refers to, e.g. "BTC-USD".
   */
  public java.lang.String getProductId() {
    return product_id;
  }


  /**
   * Sets the value of the 'product_id' field.
   * Market symbol this heartbeat refers to, e.g. "BTC-USD".
   * @param value the value to set.
   */
  public void setProductId(java.lang.String value) {
    this.product_id = value;
  }

  /**
   * Gets the value of the 'time' field.
   * @return Timestamp Coinbase generated the message (ISO-8601, UTC).
   */
  public java.lang.String getTime() {
    return time;
  }


  /**
   * Sets the value of the 'time' field.
   * Timestamp Coinbase generated the message (ISO-8601, UTC).
   * @param value the value to set.
   */
  public void setTime(java.lang.String value) {
    this.time = value;
  }

  /**
   * Creates a new HeartbeatMessageAvro RecordBuilder.
   * @return A new HeartbeatMessageAvro RecordBuilder
   */
  public static com.fnk.data.dto.avro.HeartbeatMessageAvro.Builder newBuilder() {
    return new com.fnk.data.dto.avro.HeartbeatMessageAvro.Builder();
  }

  /**
   * Creates a new HeartbeatMessageAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new HeartbeatMessageAvro RecordBuilder
   */
  public static com.fnk.data.dto.avro.HeartbeatMessageAvro.Builder newBuilder(com.fnk.data.dto.avro.HeartbeatMessageAvro.Builder other) {
    if (other == null) {
      return new com.fnk.data.dto.avro.HeartbeatMessageAvro.Builder();
    } else {
      return new com.fnk.data.dto.avro.HeartbeatMessageAvro.Builder(other);
    }
  }

  /**
   * Creates a new HeartbeatMessageAvro RecordBuilder by copying an existing HeartbeatMessageAvro instance.
   * @param other The existing instance to copy.
   * @return A new HeartbeatMessageAvro RecordBuilder
   */
  public static com.fnk.data.dto.avro.HeartbeatMessageAvro.Builder newBuilder(com.fnk.data.dto.avro.HeartbeatMessageAvro other) {
    if (other == null) {
      return new com.fnk.data.dto.avro.HeartbeatMessageAvro.Builder();
    } else {
      return new com.fnk.data.dto.avro.HeartbeatMessageAvro.Builder(other);
    }
  }

  /**
   * RecordBuilder for HeartbeatMessageAvro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<HeartbeatMessageAvro>
    implements org.apache.avro.data.RecordBuilder<HeartbeatMessageAvro> {

    /** Always the literal string "heartbeat". */
    private java.lang.String type;
    /** A monotonically increasing counter (unique across the entire feed). */
    private java.lang.String sequence;
    /** Market symbol this heartbeat refers to, e.g. "BTC-USD". */
    private java.lang.String product_id;
    /** Timestamp Coinbase generated the message (ISO-8601, UTC). */
    private java.lang.String time;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fnk.data.dto.avro.HeartbeatMessageAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.sequence)) {
        this.sequence = data().deepCopy(fields()[1].schema(), other.sequence);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.product_id)) {
        this.product_id = data().deepCopy(fields()[2].schema(), other.product_id);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.time)) {
        this.time = data().deepCopy(fields()[3].schema(), other.time);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing HeartbeatMessageAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fnk.data.dto.avro.HeartbeatMessageAvro other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sequence)) {
        this.sequence = data().deepCopy(fields()[1].schema(), other.sequence);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.product_id)) {
        this.product_id = data().deepCopy(fields()[2].schema(), other.product_id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.time)) {
        this.time = data().deepCopy(fields()[3].schema(), other.time);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'type' field.
      * Always the literal string "heartbeat".
      * @return The value.
      */
    public java.lang.String getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * Always the literal string "heartbeat".
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.fnk.data.dto.avro.HeartbeatMessageAvro.Builder setType(java.lang.String value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * Always the literal string "heartbeat".
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'type' field.
      * Always the literal string "heartbeat".
      * @return This builder.
      */
    public com.fnk.data.dto.avro.HeartbeatMessageAvro.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sequence' field.
      * A monotonically increasing counter (unique across the entire feed).
      * @return The value.
      */
    public java.lang.String getSequence() {
      return sequence;
    }


    /**
      * Sets the value of the 'sequence' field.
      * A monotonically increasing counter (unique across the entire feed).
      * @param value The value of 'sequence'.
      * @return This builder.
      */
    public com.fnk.data.dto.avro.HeartbeatMessageAvro.Builder setSequence(java.lang.String value) {
      validate(fields()[1], value);
      this.sequence = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sequence' field has been set.
      * A monotonically increasing counter (unique across the entire feed).
      * @return True if the 'sequence' field has been set, false otherwise.
      */
    public boolean hasSequence() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sequence' field.
      * A monotonically increasing counter (unique across the entire feed).
      * @return This builder.
      */
    public com.fnk.data.dto.avro.HeartbeatMessageAvro.Builder clearSequence() {
      sequence = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'product_id' field.
      * Market symbol this heartbeat refers to, e.g. "BTC-USD".
      * @return The value.
      */
    public java.lang.String getProductId() {
      return product_id;
    }


    /**
      * Sets the value of the 'product_id' field.
      * Market symbol this heartbeat refers to, e.g. "BTC-USD".
      * @param value The value of 'product_id'.
      * @return This builder.
      */
    public com.fnk.data.dto.avro.HeartbeatMessageAvro.Builder setProductId(java.lang.String value) {
      validate(fields()[2], value);
      this.product_id = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'product_id' field has been set.
      * Market symbol this heartbeat refers to, e.g. "BTC-USD".
      * @return True if the 'product_id' field has been set, false otherwise.
      */
    public boolean hasProductId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'product_id' field.
      * Market symbol this heartbeat refers to, e.g. "BTC-USD".
      * @return This builder.
      */
    public com.fnk.data.dto.avro.HeartbeatMessageAvro.Builder clearProductId() {
      product_id = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'time' field.
      * Timestamp Coinbase generated the message (ISO-8601, UTC).
      * @return The value.
      */
    public java.lang.String getTime() {
      return time;
    }


    /**
      * Sets the value of the 'time' field.
      * Timestamp Coinbase generated the message (ISO-8601, UTC).
      * @param value The value of 'time'.
      * @return This builder.
      */
    public com.fnk.data.dto.avro.HeartbeatMessageAvro.Builder setTime(java.lang.String value) {
      validate(fields()[3], value);
      this.time = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * Timestamp Coinbase generated the message (ISO-8601, UTC).
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'time' field.
      * Timestamp Coinbase generated the message (ISO-8601, UTC).
      * @return This builder.
      */
    public com.fnk.data.dto.avro.HeartbeatMessageAvro.Builder clearTime() {
      time = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public HeartbeatMessageAvro build() {
      try {
        HeartbeatMessageAvro record = new HeartbeatMessageAvro();
        record.type = fieldSetFlags()[0] ? this.type : (java.lang.String) defaultValue(fields()[0]);
        record.sequence = fieldSetFlags()[1] ? this.sequence : (java.lang.String) defaultValue(fields()[1]);
        record.product_id = fieldSetFlags()[2] ? this.product_id : (java.lang.String) defaultValue(fields()[2]);
        record.time = fieldSetFlags()[3] ? this.time : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<HeartbeatMessageAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<HeartbeatMessageAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<HeartbeatMessageAvro>
    READER$ = (org.apache.avro.io.DatumReader<HeartbeatMessageAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.type);

    out.writeString(this.sequence);

    out.writeString(this.product_id);

    out.writeString(this.time);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.type = in.readString();

      this.sequence = in.readString();

      this.product_id = in.readString();

      this.time = in.readString();

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.type = in.readString();
          break;

        case 1:
          this.sequence = in.readString();
          break;

        case 2:
          this.product_id = in.readString();
          break;

        case 3:
          this.time = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










